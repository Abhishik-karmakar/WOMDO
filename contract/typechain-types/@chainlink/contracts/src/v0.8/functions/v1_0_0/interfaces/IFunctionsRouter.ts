/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../../common";

export declare namespace FunctionsResponse {
  export type CommitmentStruct = {
    requestId: PromiseOrValue<BytesLike>;
    coordinator: PromiseOrValue<string>;
    estimatedTotalCostJuels: PromiseOrValue<BigNumberish>;
    client: PromiseOrValue<string>;
    subscriptionId: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    adminFee: PromiseOrValue<BigNumberish>;
    donFee: PromiseOrValue<BigNumberish>;
    gasOverheadBeforeCallback: PromiseOrValue<BigNumberish>;
    gasOverheadAfterCallback: PromiseOrValue<BigNumberish>;
    timeoutTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type CommitmentStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    requestId: string;
    coordinator: string;
    estimatedTotalCostJuels: BigNumber;
    client: string;
    subscriptionId: BigNumber;
    callbackGasLimit: number;
    adminFee: BigNumber;
    donFee: BigNumber;
    gasOverheadBeforeCallback: number;
    gasOverheadAfterCallback: number;
    timeoutTimestamp: number;
  };
}

export interface IFunctionsRouterInterface extends utils.Interface {
  functions: {
    "fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))": FunctionFragment;
    "getAdminFee()": FunctionFragment;
    "getAllowListId()": FunctionFragment;
    "getContractById(bytes32)": FunctionFragment;
    "getProposedContractById(bytes32)": FunctionFragment;
    "getProposedContractSet()": FunctionFragment;
    "isValidCallbackGasLimit(uint64,uint32)": FunctionFragment;
    "pause()": FunctionFragment;
    "proposeContractsUpdate(bytes32[],address[])": FunctionFragment;
    "sendRequest(uint64,bytes,uint16,uint32,bytes32)": FunctionFragment;
    "sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)": FunctionFragment;
    "setAllowListId(bytes32)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateContracts()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fulfill"
      | "getAdminFee"
      | "getAllowListId"
      | "getContractById"
      | "getProposedContractById"
      | "getProposedContractSet"
      | "isValidCallbackGasLimit"
      | "pause"
      | "proposeContractsUpdate"
      | "sendRequest"
      | "sendRequestToProposed"
      | "setAllowListId"
      | "unpause"
      | "updateContracts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      FunctionsResponse.CommitmentStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowListId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractById",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedContractById",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedContractSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCallbackGasLimit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeContractsUpdate",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequestToProposed",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateContracts",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowListId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedContractById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedContractSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeContractsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequestToProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateContracts",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFunctionsRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFunctionsRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfill(
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      juelsPerGas: PromiseOrValue<BigNumberish>,
      costWithoutFulfillment: PromiseOrValue<BigNumberish>,
      transmitter: PromiseOrValue<string>,
      commitment: FunctionsResponse.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdminFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { adminFee: BigNumber }>;

    getAllowListId(overrides?: CallOverrides): Promise<[string]>;

    getContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposedContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposedContractSet(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    isValidCallbackGasLimit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeContractsUpdate(
      proposalSetIds: PromiseOrValue<BytesLike>[],
      proposalSetAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRequestToProposed(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowListId(
      allowListId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateContracts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fulfill(
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    juelsPerGas: PromiseOrValue<BigNumberish>,
    costWithoutFulfillment: PromiseOrValue<BigNumberish>,
    transmitter: PromiseOrValue<string>,
    commitment: FunctionsResponse.CommitmentStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdminFee(overrides?: CallOverrides): Promise<BigNumber>;

  getAllowListId(overrides?: CallOverrides): Promise<string>;

  getContractById(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposedContractById(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposedContractSet(
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  isValidCallbackGasLimit(
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeContractsUpdate(
    proposalSetIds: PromiseOrValue<BytesLike>[],
    proposalSetAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRequest(
    subscriptionId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    dataVersion: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    donId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRequestToProposed(
    subscriptionId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    dataVersion: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    donId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowListId(
    allowListId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateContracts(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fulfill(
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      juelsPerGas: PromiseOrValue<BigNumberish>,
      costWithoutFulfillment: PromiseOrValue<BigNumberish>,
      transmitter: PromiseOrValue<string>,
      commitment: FunctionsResponse.CommitmentStruct,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    getAdminFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowListId(overrides?: CallOverrides): Promise<string>;

    getContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposedContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposedContractSet(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    isValidCallbackGasLimit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    proposeContractsUpdate(
      proposalSetIds: PromiseOrValue<BytesLike>[],
      proposalSetAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    sendRequestToProposed(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAllowListId(
      allowListId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateContracts(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    fulfill(
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      juelsPerGas: PromiseOrValue<BigNumberish>,
      costWithoutFulfillment: PromiseOrValue<BigNumberish>,
      transmitter: PromiseOrValue<string>,
      commitment: FunctionsResponse.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdminFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowListId(overrides?: CallOverrides): Promise<BigNumber>;

    getContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedContractSet(overrides?: CallOverrides): Promise<BigNumber>;

    isValidCallbackGasLimit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeContractsUpdate(
      proposalSetIds: PromiseOrValue<BytesLike>[],
      proposalSetAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRequestToProposed(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowListId(
      allowListId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateContracts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfill(
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      juelsPerGas: PromiseOrValue<BigNumberish>,
      costWithoutFulfillment: PromiseOrValue<BigNumberish>,
      transmitter: PromiseOrValue<string>,
      commitment: FunctionsResponse.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdminFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowListId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedContractById(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedContractSet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidCallbackGasLimit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeContractsUpdate(
      proposalSetIds: PromiseOrValue<BytesLike>[],
      proposalSetAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRequestToProposed(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      dataVersion: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      donId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowListId(
      allowListId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateContracts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
