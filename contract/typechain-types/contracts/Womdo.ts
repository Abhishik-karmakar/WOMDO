/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface WomdoInterface extends utils.Interface {
  functions: {
    "USDT()": FunctionFragment;
    "acceptAd(uint256)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptedUserAddress(address,uint256,uint256)": FunctionFragment;
    "adOwner(uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "donId()": FunctionFragment;
    "fulfillRequestLocal(bytes)": FunctionFragment;
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
    "influencerShare(uint256,uint256)": FunctionFragment;
    "isInfluencerAccepted(address,uint256)": FunctionFragment;
    "isInfluencerClaimed(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerAd(uint256,uint256,string)": FunctionFragment;
    "returnedArray(uint256)": FunctionFragment;
    "s_lastRequestId()": FunctionFragment;
    "sendRequest(string,uint8,bytes,string[],bytes[],uint64,uint32)": FunctionFragment;
    "setDonId(bytes32)": FunctionFragment;
    "totalAds()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userAds(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "USDT"
      | "acceptAd"
      | "acceptOwnership"
      | "acceptedUserAddress"
      | "adOwner"
      | "claim"
      | "donId"
      | "fulfillRequestLocal"
      | "handleOracleFulfillment"
      | "influencerShare"
      | "isInfluencerAccepted"
      | "isInfluencerClaimed"
      | "owner"
      | "registerAd"
      | "returnedArray"
      | "s_lastRequestId"
      | "sendRequest"
      | "setDonId"
      | "totalAds"
      | "transferOwnership"
      | "userAds"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptAd",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedUserAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "donId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillRequestLocal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "influencerShare",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInfluencerAccepted",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInfluencerClaimed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAd",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "returnedArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "totalAds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userAds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRequestLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "influencerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInfluencerAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInfluencerClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnedArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDonId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userAds", data: BytesLike): Result;

  events: {
    "AdAccepted(uint256,address,address[])": EventFragment;
    "AdRegistered(uint256,uint256,uint256,address,string)": EventFragment;
    "Claimed(uint256,address,uint256)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface AdAcceptedEventObject {
  adId: BigNumber;
  influencer: string;
  acceptedUserAddress: string[];
}
export type AdAcceptedEvent = TypedEvent<
  [BigNumber, string, string[]],
  AdAcceptedEventObject
>;

export type AdAcceptedEventFilter = TypedEventFilter<AdAcceptedEvent>;

export interface AdRegisteredEventObject {
  adId: BigNumber;
  totalUsers: BigNumber;
  usdtAmount: BigNumber;
  brandAddress: string;
  productName: string;
}
export type AdRegisteredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  AdRegisteredEventObject
>;

export type AdRegisteredEventFilter = TypedEventFilter<AdRegisteredEvent>;

export interface ClaimedEventObject {
  adId: BigNumber;
  influencer: string;
  share: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestFulfilledEventObject {
  id: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  id: string;
}
export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface Womdo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WomdoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USDT(overrides?: CallOverrides): Promise<[string]>;

    acceptAd(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptedUserAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    adOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claim(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donId(overrides?: CallOverrides): Promise<[string]>;

    fulfillRequestLocal(
      response: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    influencerShare(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInfluencerAccepted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInfluencerClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerAd(
      _users: PromiseOrValue<BigNumberish>,
      _usdtAmount: PromiseOrValue<BigNumberish>,
      _productName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnedArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    s_lastRequestId(overrides?: CallOverrides): Promise<[string]>;

    sendRequest(
      source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAds(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userAds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalUsers: BigNumber; usdtAmount: BigNumber }
    >;
  };

  USDT(overrides?: CallOverrides): Promise<string>;

  acceptAd(
    _adId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptedUserAddress(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  adOwner(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  claim(
    _adId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donId(overrides?: CallOverrides): Promise<string>;

  fulfillRequestLocal(
    response: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleOracleFulfillment(
    requestId: PromiseOrValue<BytesLike>,
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  influencerShare(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInfluencerAccepted(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInfluencerClaimed(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerAd(
    _users: PromiseOrValue<BigNumberish>,
    _usdtAmount: PromiseOrValue<BigNumberish>,
    _productName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnedArray(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  s_lastRequestId(overrides?: CallOverrides): Promise<string>;

  sendRequest(
    source: PromiseOrValue<string>,
    secretsLocation: PromiseOrValue<BigNumberish>,
    encryptedSecretsReference: PromiseOrValue<BytesLike>,
    args: PromiseOrValue<string>[],
    bytesArgs: PromiseOrValue<BytesLike>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDonId(
    newDonId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAds(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userAds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { totalUsers: BigNumber; usdtAmount: BigNumber }
  >;

  callStatic: {
    USDT(overrides?: CallOverrides): Promise<string>;

    acceptAd(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptedUserAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    adOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donId(overrides?: CallOverrides): Promise<string>;

    fulfillRequestLocal(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    influencerShare(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInfluencerAccepted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInfluencerClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerAd(
      _users: PromiseOrValue<BigNumberish>,
      _usdtAmount: PromiseOrValue<BigNumberish>,
      _productName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    returnedArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_lastRequestId(overrides?: CallOverrides): Promise<string>;

    sendRequest(
      source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAds(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userAds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalUsers: BigNumber; usdtAmount: BigNumber }
    >;
  };

  filters: {
    "AdAccepted(uint256,address,address[])"(
      adId?: null,
      influencer?: null,
      acceptedUserAddress?: null
    ): AdAcceptedEventFilter;
    AdAccepted(
      adId?: null,
      influencer?: null,
      acceptedUserAddress?: null
    ): AdAcceptedEventFilter;

    "AdRegistered(uint256,uint256,uint256,address,string)"(
      adId?: null,
      totalUsers?: null,
      usdtAmount?: null,
      brandAddress?: null,
      productName?: null
    ): AdRegisteredEventFilter;
    AdRegistered(
      adId?: null,
      totalUsers?: null,
      usdtAmount?: null,
      brandAddress?: null,
      productName?: null
    ): AdRegisteredEventFilter;

    "Claimed(uint256,address,uint256)"(
      adId?: null,
      influencer?: null,
      share?: null
    ): ClaimedEventFilter;
    Claimed(adId?: null, influencer?: null, share?: null): ClaimedEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequestFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;

    "RequestSent(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestSentEventFilter;
    RequestSent(id?: PromiseOrValue<BytesLike> | null): RequestSentEventFilter;
  };

  estimateGas: {
    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAd(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptedUserAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donId(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillRequestLocal(
      response: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    influencerShare(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInfluencerAccepted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInfluencerClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerAd(
      _users: PromiseOrValue<BigNumberish>,
      _usdtAmount: PromiseOrValue<BigNumberish>,
      _productName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnedArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    sendRequest(
      source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAds(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userAds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptAd(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptedUserAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _adId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillRequestLocal(
      response: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    influencerShare(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInfluencerAccepted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInfluencerClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAd(
      _users: PromiseOrValue<BigNumberish>,
      _usdtAmount: PromiseOrValue<BigNumberish>,
      _productName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnedArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendRequest(
      source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userAds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
